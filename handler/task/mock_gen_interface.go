// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=mock_gen_interface.go -package=handler
//

// Package handler is a generated GoMock package.
package task

import (
	task "microservice/Models/task"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// Mockservice is a mock of service interface.
type Mockservice struct {
	ctrl     *gomock.Controller
	recorder *MockserviceMockRecorder
	isgomock struct{}
}

// MockserviceMockRecorder is the mock recorder for Mockservice.
type MockserviceMockRecorder struct {
	mock *Mockservice
}

// NewMockservice creates a new mock instance.
func NewMockservice(ctrl *gomock.Controller) *Mockservice {
	mock := &Mockservice{ctrl: ctrl}
	mock.recorder = &MockserviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockservice) EXPECT() *MockserviceMockRecorder {
	return m.recorder
}

// Completetask mocks base method.
func (m *Mockservice) Completetask(id int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Completetask", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Completetask indicates an expected call of Completetask.
func (mr *MockserviceMockRecorder) Completetask(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Completetask", reflect.TypeOf((*Mockservice)(nil).Completetask), id)
}

// Deletetask mocks base method.
func (m *Mockservice) Deletetask(id int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deletetask", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deletetask indicates an expected call of Deletetask.
func (mr *MockserviceMockRecorder) Deletetask(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deletetask", reflect.TypeOf((*Mockservice)(nil).Deletetask), id)
}

// Getalltask mocks base method.
func (m *Mockservice) Getalltask() ([]task.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Getalltask")
	ret0, _ := ret[0].([]task.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Getalltask indicates an expected call of Getalltask.
func (mr *MockserviceMockRecorder) Getalltask() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Getalltask", reflect.TypeOf((*Mockservice)(nil).Getalltask))
}

// Gettaskbyid mocks base method.
func (m *Mockservice) Gettaskbyid(id int) (*task.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gettaskbyid", id)
	ret0, _ := ret[0].(*task.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gettaskbyid indicates an expected call of Gettaskbyid.
func (mr *MockserviceMockRecorder) Gettaskbyid(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gettaskbyid", reflect.TypeOf((*Mockservice)(nil).Gettaskbyid), id)
}

// Insertask mocks base method.
func (m *Mockservice) Insertask(t task.Task) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insertask", t)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insertask indicates an expected call of Insertask.
func (mr *MockserviceMockRecorder) Insertask(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insertask", reflect.TypeOf((*Mockservice)(nil).Insertask), t)
}
